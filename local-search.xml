<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>如何掌握所有的程序语言</title>
    <link href="undefined2020/01/16/%E5%A6%82%E4%BD%95%E6%8E%8C%E6%8F%A1%E6%89%80%E6%9C%89%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/"/>
    <url>2020/01/16/%E5%A6%82%E4%BD%95%E6%8E%8C%E6%8F%A1%E6%89%80%E6%9C%89%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<h2 id="如何掌握所有的程序语言"><a href="#如何掌握所有的程序语言" class="headerlink" title="如何掌握所有的程序语言"></a>如何掌握所有的程序语言</h2><p>对的，我这里要讲的不是如何掌握一种程序语言，而是所有的……</p><p>很多编程初学者至今还在给我写信请教，问我该学习什么程序语言，怎么学习。由于我知道如何掌握“所有”的程序语言，总是感觉这种该学“一种”什么语言的问题比较低级，所以一直没来得及回复他们 :P 可是逐渐的，我发现原来不只是小白们有这个问题，就连美国大公司的很多资深工程师，其实也没搞明白。</p><p>今天我有动力了，想来统一回答一下这个搁置已久的“初级问题”。类似的话题貌似曾经写过，然而现在我想把它重新写一遍。因为在跟很多人交流之后，我对自己头脑中的（未转化为语言的）想法，有了更精准的表达。</p><p>如果你存在以下的种种困惑，那么这篇文章也许会对你有所帮助：</p><ol><li>你是编程初学者，不知道该选择什么程序语言来入门。</li><li>你是资深的程序员或者团队领导，对新出现的种种语言感到困惑，不知道该“投资”哪种语言。</li><li>你的团队为使用哪种程序语言争论不休，发生各种宗教斗争。</li><li>你追逐潮流采用了某种时髦的语言，结果两个月之后发现深陷泥潭，痛苦不堪……</li></ol><p>虽然我已经不再过问这些世事，然而无可置疑的现实是，程序语言仍然是很重要的话题，这个情况短时间内不会改变。程序员的岗位往往会要求熟悉某些语言，甚至某些奇葩的公司要求你“深入理解 OOP 或者 FP 设计模式”。对于在职的程序员，程序语言至今仍然是可以争得面红耳赤的宗教话题。它的宗教性之强，以至于我在批评和调侃某些语言（比如 Go 语言）的时候，有些人会本能地以为我是另外一种语言（比如 Java）的粉丝。</p><p>显然我不可能是任何一种语言的粉丝，我甚至不是 Yin 语言的粉丝 ;) 对于任何从没见过的语言，我都是直接拿起来就用，而不需要经过学习的过程。看了这篇文章，也许你会明白我为什么可以达到这个效果。理解了这里面的东西，每个程序员都应该可以做到这一点。嗯，但愿吧。</p><h3 id="重视语言特性，而不是语言"><a href="#重视语言特性，而不是语言" class="headerlink" title="重视语言特性，而不是语言"></a>重视语言特性，而不是语言</h3><hr><p>很多人在乎自己或者别人是否“会”某种语言，对“发明”了某种语言的人倍加崇拜，为各种语言的孰优孰劣争得面红耳赤。这些问题对于我来说都是不存在的。虽然我写文章批评过不少语言的缺陷，在实际工作中我却很少跟人争论这些。如果有其它人在我身边争论，我甚至会戴上耳机，都懒得听他们说什么 ;) 为什么呢？我发现归根结底的原因，是因为我重视的是“语言特性”，而不是整个的“语言”。我能用任何语言写出不错的代码，就算再糟糕的语言也差不了多少。</p><p>任何一种“语言”，都是各种“语言特性”的组合。打个比方吧，一个程序语言就像一台电脑。它的牌子可能叫“联想”，或者“IBM”，或者“Dell”，或者“苹果”。那么，你可以说苹果一定比 IBM 好吗？你不能。你得看看它里面装的是什么型号的处理器，有多少个核，主频多少，有多少 L1 cache，L2 cache……，有多少内存和硬盘，显示器分辨率有多大，显卡是什么 GPU，网卡速度，等等各种“配置”。有时候你还得看各个组件之间的兼容性。</p><p>这些配置对应到程序语言里面，就是所谓“语言特性”。举一些语言特性的例子：</p><ul><li>变量定义</li><li>算术运算</li><li>for 循环语句，while 循环语句</li><li>函数定义，函数调用</li><li>递归</li><li>静态类型系统</li><li>类型推导</li><li>lambda 函数</li><li>面向对象</li><li>垃圾回收</li><li>指针算术</li><li>goto 语句</li></ul><p>这些语言特性，就像你在选择一台电脑的时候，看它里面是什么配置。选电脑的时候，没有人会说 Dell 一定是最好的，他们只会说这个型号里面装的是 Intel 的 i7 处理器，这个比 i5 的好，DDR3 的内存 比 DDR2 的快这么多，SSD 比磁盘快很多，ATI 的显卡是垃圾…… 如此等等。</p><p>程序语言也是一样的道理。对于初学者来说，其实没必要纠结到底要先学哪一种语言，再学哪一种。曾经有人给我发信问这种问题，纠结了好几个星期，结果一个语言都还没开始学。有这纠结的时间，其实都可以把他纠结过的语言全部掌握了。</p><p>初学者往往不理解，每一种语言里面必然有一套“通用”的特性。比如变量，函数，整数和浮点数运算，等等。这些是每个通用程序语言里面都必须有的，一个都不能少。你只要通过“某种语言”学会了这些特性，掌握这些特性的根本概念，就能随时把这些知识应用到任何其它语言。你为此投入的时间基本不会浪费。所以初学者纠结要“先学哪种语言”，这种时间花的很不值得，还不如随便挑一个语言，跳进去。</p><p>如果你不能用一种语言里面的基本特性写出好的代码，那你换成另外一种语言也无济于事。你会写出一样差的代码。我经常看到有些人 Java 代码写得相当乱，相当糟糕，却骂 Java 不好，雄心勃勃要换用 Go 语言。这些人没有明白，是否能写出好的代码在于人，而不在于语言。如果你的心中没有清晰简单的思维模型，你用任何语言表述出来都是一堆乱麻。如果你 Java 代码写得很糟糕，那么你写 Go 语言代码也会一样糟糕，甚至更差。</p><p>很多初学者不了解，一个高明的程序员如果开始用一种新的程序语言，他往往不是去看这个语言的大部头手册或者书籍，而是先有一个需要解决的问题。手头有了问题，他可以用两分钟浏览一下这语言的手册，看看这语言大概长什么样。然后，他直接拿起一段例子代码来开始修改捣鼓，想法把这代码改成自己正想解决的问题。在这个简短的过程中，他很快的掌握了这个语言，并用它表达出心里的想法。</p><p>在这个过程中，随着需求的出现，他可能会问这样的问题：</p><ul><li>这个语言的“变量定义”是什么语法，需要“声明类型”吗，还是可以用“类型推导”？</li><li>它的“类型”是什么语法？是否支持“泛型”？泛型的 “variance” 如何表达？</li><li>这个语言的“函数”是什么语法，“函数调用”是什么语法，可否使用“缺省参数”？</li><li>……</li></ul><p>注意到了吗？上面每一个引号里面的内容，都是一种语言特性（或者叫概念）。这些概念可以存在于任何的语言里面，虽然语法可能不一样，它们的本质都是一样的。比如，有些语言的参数类型写在变量前面，有些写在后面，有些中间隔了一个冒号，有些没有。</p><p>这些实际问题都是随着写实际的代码，解决手头的问题，自然而然带出来的，而不是一开头就抱着语言手册看得仔仔细细。因为掌握了语言特性的人都知道，自己需要的特性，在任何语言里面一定有对应的表达方式。如果没有直接的方式表达，那么一定有某种“绕过方式”。如果有直接的表达方式，那么它只是语法稍微有所不同而已。所以，他是带着问题找特性，就像查字典一样，而不是被淹没于大部头的手册里面，昏昏欲睡一个月才开始写代码。</p><p>掌握了通用的语言特性，剩下的就只剩某些语言“特有”的特性了。研究语言的人都知道，要设计出新的，好的，无害的特性，是非常困难的。所以一般说来，一种好的语言，它所特有的新特性，终究不会超过一两种。如果有个语言号称自己有超过 5 种新特性，那你就得小心了，因为它们带来的和可能不是优势，而是灾难！</p><p>同样的道理，最好的语言研究者，往往不是某种语言的设计者，而是某种关键语言特性的设计者（或者支持者）。举个例子，著名的计算机科学家 Dijkstra 就是“递归”的强烈支持者。现在的语言里面都有递归，然而你可能不知道，早期的程序语言是不支持递归的。直到 Dijkstra 强烈要求 Algol 60 委员会加入对递归的支持，这个局面才改变了。Tony Hoare 也是语言特性设计者。他设计了几个重要的语言特性，却没有设计过任何语言。另外大家不要忘了，有个语言专家叫王垠，他是早期 union type 的支持者和实现者，也是 checked exception 特性的支持者，他在自己的<a href="http://www.yinwang.org/blog-cn/2017/05/23/kotlin" target="_blank" rel="noopener">博文</a>里指出了 checked exception 和 union type 之间的关系 :P</p><p>很多人盲目的崇拜语言设计者，只要听到有人设计（或者美其民曰“发明”）了一个语言，就热血沸腾，佩服的五体投地。他们却没有理解，其实所有的程序语言，不过是像 Dell，联想一样的“组装机”。语言特性的设计者，才是像 Intel，AMD，ARM，Qualcomm 那样核心技术的创造者。</p><h3 id="合理的入门语言"><a href="#合理的入门语言" class="headerlink" title="合理的入门语言"></a>合理的入门语言</h3><hr><p>所以初学者要想事半功倍，就应该从一种“合理”的，没有明显严重问题的语言出发，掌握最关键的语言特性，然后由此把这些概念应用到其它语言。哪些是合理的入门语言呢？我个人觉得这些语言都可以用来入门：</p><ul><li>Scheme</li><li>C</li><li>Java</li><li>Python</li><li>JavaScript</li></ul><p>那么相比之下，我不推荐用哪些语言入门呢？</p><ul><li>Shell</li><li>PowerShell</li><li>AWK</li><li>Perl</li><li>PHP</li><li>Basic</li><li>Go</li><li>Rust</li></ul><p>总的说来，你不应该使用所谓“<a href="http://www.yinwang.org/blog-cn/2013/03/29/scripting-language" target="_blank" rel="noopener">脚本语言</a>”作为入门语言，特别是那些源于早期 Unix 系统的脚本语言工具。PowerShell 虽然比 Unix 的 Shell 有所进步，然而它仍然没有摆脱脚本语言的根本问题——他们的设计者不知道他们自己在干什么 :P</p><p>采用脚本语言学编程，一个很严重的问题就是使得学习者抓不住关键。脚本语言往往把一些系统工具性质的东西（比如正则表达式，Web 概念）加入到语法里面，导致初学者为它们浪费太多时间，却没有理解编程最关键的概念：变量，函数，递归，类型……</p><p>不推荐 Go 语言的原因类似，虽然 Go 语言不算脚本语言，然而他的设计者显然不明白自己在干什么。所以使用 Go 语言来学编程，你不能专注于最关键，最好的语言特性。关于 Go 语言的各种毛病，你可以参考这篇<a href="http://www.yinwang.org/blog-cn/2014/04/18/golang" target="_blank" rel="noopener">文章</a>。</p><p>同样的，我不觉得 Rust 适合作为入门语言。Rust 花了太大精力来夸耀它的“新特性”，而这些新特性不但不是最关键的部分，而且很多是有问题的。初学者过早的关注这些特性，不仅学不会最关键的编程思想，而且可能误入歧途。关于 Rust 的一些问题，你可以参考这篇<a href="http://www.yinwang.org/blog-cn/2016/09/18/rust" target="_blank" rel="noopener">文章</a>。</p><h3 id="掌握关键语言特性，忽略次要特性"><a href="#掌握关键语言特性，忽略次要特性" class="headerlink" title="掌握关键语言特性，忽略次要特性"></a>掌握关键语言特性，忽略次要特性</h3><hr><p>为了达到我之前提到的融会贯通，一通百通的效果，初学者应该专注于语言里面最关键的特性，而不是被次要的特性分心。</p><p>举个夸张点的例子。我发现很多编程培训班和野鸡大学的编程入门课，往往一来就教学生如何使用 printf 打印“Hello World！”，进而要他们记忆 printf 的各种“格式字符”的意义，要他们实现各种复杂格式的打印输出，甚至要求打印到文本文件里，然后再读出来……</p><p>可是殊不知，这种输出输入操作其实根本不算是语言的一部分，而且对于掌握编程的核心概念来说，都是次要的。有些人的 Java 课程进行了好几个星期，居然还在布置各种 printf 的作业。学生写出几百行的 printf，却不理解变量和函数是什么，甚至连算术语句和循环语句都不知道怎么用！这就是为什么很多初学者感觉编程很难，我连 <code>%d</code>，<code>%f</code>，<code>%.2f</code> 的含义都记不住，还怎么学编程！</p><p>然而这些野鸡大学的“教授”头衔是如此的洗脑，以至于被他们教过的学生（比如我女朋友）到我这里请教，居然骂我净教一些没用的东西，学了连 printf 的作业都没法完成 :P 你别跟我讲 for 循环，函数什么的了…… 可不可以等几个月，等我背熟了 printf 的用法再学那些啊？</p><p>所以你就发现一旦被差劲的老师教过，这个程序员基本就毁了。就算遇到好的老师，他们也很难纠正过来。</p><p>当然这是一个夸张的例子，因为 printf 根本不算是语言特性，但这个例子从同样的角度说明了次要肤浅的语言特性带来的问题。</p><p>这里举一些次要语言特性的例子：</p><ul><li>C 语言的语句块，如果里面只有一条语句，可以不打花括号。</li><li>Go 语言的函数参数类型如果一样可以合并在一起写，比如 <code>func foo(s string, x, y, z int, c bool) { ... }</code></li><li>Perl 把正则表达式作为语言的一种特殊语法</li><li>JavaScript 语句可以在某些时候省略句尾的分号</li><li>Haskell 和 ML 等语言的 <a href="http://www.yinwang.org/blog-cn/2013/04/02/currying" target="_blank" rel="noopener">currying</a></li></ul><h3 id="自己动手实现语言特性"><a href="#自己动手实现语言特性" class="headerlink" title="自己动手实现语言特性"></a>自己动手实现语言特性</h3><hr><p>在基本学会了各种语言特性，能用它们来写代码之后，下一步的进阶就是去实现它们。只有实现了各种语言特性，你才能完全地拥有它们，成为它们的主人。否则你就只是它们的使用者，你会被语言的设计者牵着鼻子走。</p><p>有个大师说得好，完全理解一种语言最好的方法就是自己动手实现它，也就是自己写一个解释器来实现它的语义。但我觉得这句话应该稍微修改一下：完全理解一种“语言特性”最好的方法就是自己亲自实现它。</p><p>注意我在这里把“语言”改为了“语言特性”。你并不需要实现整个语言来达到这个目的，因为我们最终使用的是语言特性。只要你自己实现了一种语言特性，你就能理解这个特性在任何语言里的实现方式和用法。</p><p>举个例子，学习 SICP 的时候，大家都会亲自用 Scheme 实现一个面向对象系统。用 Scheme 实现的面向对象系统，跟 Java，C++，Python 之类的语言语法相去甚远，然而它却能帮助你理解任何这些 OOP 语言里面的“面向对象”这一概念，它甚至能帮助你理解各种面向对象实现的差异。</p><p>这种效果是你直接学习 OOP 语言得不到的，因为在学习 Java，C++，Python 之类语言的时候，你只是一个用户，而用 Scheme 自己动手实现了 OO 系统之后，你成为了一个创造者。</p><p>类似的特性还包括类型推导，类型检查，惰性求值，如此等等。我实现过几乎所有的语言特性，所以任何语言在我的面前，都是可以被任意拆卸组装的玩具，而不再是凌驾于我之上的神圣。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><hr><p>写了这么多，重要的话重复三遍：语言特性，语言特性，语言特性，语言特性！不管是初学者还是资深程序员，应该专注于语言特性，而不是纠结于整个的“语言品牌”。只有这样才能达到融会贯通，拿起任何语言几乎立即就会用，并且写出高质量的代码。</p><p>转载来自：<a href="http://www.yinwang.org/blog-cn/2017/07/06/master-pl" target="_blank" rel="noopener">http://www.yinwang.org/blog-cn/2017/07/06/master-pl</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>古诗词一</title>
    <link href="undefined2020/01/15/%E5%8F%A4%E8%AF%97%E8%AF%8D%E4%B8%80/"/>
    <url>2020/01/15/%E5%8F%A4%E8%AF%97%E8%AF%8D%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<p>《诗经·郑风·子衿》</p><hr><p><strong>青青子衿，悠悠我心。</strong></p><p><strong>纵我不往，子宁不嗣音？</strong></p><p><strong>青青子佩，悠悠我思。</strong></p><p><strong>纵我不往，子宁不来？</strong></p><p><strong>挑兮达兮，在城阙兮。</strong></p><p><strong>一日不见，如三月兮。</strong></p><hr><p>《诗经·野有蔓草》</p><hr><p><strong>野有蔓草，零露漙兮。</strong></p><p><strong>有美一人，清扬婉兮。</strong></p><p><strong>邂逅相遇，适我愿兮。</strong></p><p><strong>野有蔓草，零露瀼瀼。</strong></p><p><strong>有美一人，婉如清扬。</strong></p><p><strong>邂逅相遇，与子偕臧。</strong></p><hr><p>《卿云歌》</p><hr><p><strong>卿云烂兮，糺缦缦兮。</strong></p><p><strong>日月光华，旦复旦兮。</strong></p><p><strong>明明上天，烂然星陈。</strong></p><p><strong>日月光华，弘于一人。</strong></p><hr><p>《西洲曲》</p><hr><p><strong>忆梅下西洲，折梅寄江北。</strong></p><p><strong>单衫杏子红，双鬓鸦雏色。</strong></p><p><strong>西洲在何处？两桨桥头渡。</strong></p><p><strong>日暮伯劳飞，风吹乌臼树。</strong></p><p><strong>树下即门前，门中露翠钿。</strong></p><p><strong>开门郎不至，出门采红莲。</strong></p><p><strong>采莲南塘秋，莲花过人头。</strong></p><p><strong>低头弄莲子，莲子青如水。</strong></p><p><strong>置莲怀袖中，莲心彻底红。</strong></p><p><strong>忆郎郎不至，仰首望飞鸿。</strong></p><p><strong>鸿飞满西洲，望郎上青楼。</strong></p><p><strong>楼高望不见，尽日栏杆头。</strong></p><p><strong>栏杆十二曲，垂手明如玉。</strong></p><p><strong>卷帘天自高，海水摇空绿。</strong></p><p><strong>海水梦悠悠，君愁我亦愁。</strong></p><p><strong>南风知我意，吹梦到西洲。</strong></p><hr><p>《乐府·相和歌辞·白头吟》</p><hr><p><strong>皑如山上雪，皎若云间月。</strong></p><p><strong>闻君有两意，故来相决绝。</strong></p><p><strong>今日斗酒会，明旦沟水头。</strong></p><p><strong>躞蹀御沟上，沟水东西流。</strong></p><p><strong>凄凄复凄凄，嫁娶不须啼。</strong></p><p><strong>愿得一心人，白头不相离。</strong></p><p><strong>竹竿何袅袅，鱼尾何簁簁。</strong></p><p><strong>男儿重意气，何用钱刀为。</strong></p><hr><p>《饮酒·其五》</p><hr><p><strong>结庐在人境，而无车马喧。</strong></p><p><strong>问君何能尔？心远地自偏。</strong></p><p><strong>采菊东篱下，悠然见南山。</strong></p><p><strong>山气日夕佳，飞鸟相与还。</strong></p><p><strong>此中有真意，欲辨已忘言。</strong></p><hr><p>《带上听吹笛》</p><hr><p><strong>雪净胡天牧马还，月明羌笛戍楼间。</strong></p><p><strong>借问梅花何处落，风吹一夜满关山。</strong></p><hr><p>《白雪歌送武判官归京》</p><hr><p><strong>北风卷地白草折，胡天八月即飞雪。</strong></p><p><strong>忽如一夜春风来，千树万树梨花开。</strong></p><p><strong>散入珠帘湿罗幕，狐裘不暖锦衾薄。</strong></p><p><strong>将军角弓不得控，都护铁衣冷难着。</strong></p><p><strong>瀚海阑干百丈冰，愁云惨淡万里凝。</strong></p><p><strong>中军置酒饮归客，胡琴琵琶与羌笛。</strong></p><p><strong>纷纷暮雪下辕门，风掣红旗动不翻。</strong></p><p><strong>轮台东门送君去，去时雪满天山路。</strong></p><p><strong>山回路转不见君，雪上空留马行处。</strong></p><hr><p>《离思·其四》</p><hr><p><strong>曾经沧海难为水，除却巫山不是云。</strong></p><p><strong>取次花丛懒回顾，半缘修道半缘君。</strong></p><hr><p>《春江花月夜·节选》</p><hr><p><strong>春江潮水连海平，海上明月共潮生</strong>。</p><p><strong>滟滟随波千万里，何处春江无月明！</strong></p><p><strong>江流宛转绕芳甸，月照花林皆似霰。</strong></p><p><strong>空里流霜不觉飞，汀上白沙看不见。</strong></p><p><strong>江天一色无纤尘，皎皎空中孤月轮。</strong></p><p><strong>江畔何人初见月？江月何年初照人？</strong></p><p><strong>人生代代无穷已，江月年年望相似。</strong></p><p><strong>不知江月待何人，但见长江送流水。</strong></p><p><strong>白云一片去悠悠，青枫浦上不胜愁。</strong></p><p><strong>谁家今夜扁舟子？何处相思明月楼？</strong></p><p><strong>可怜楼上月徘徊，应照离人妆镜台。</strong></p><p><strong>玉户帘中卷不去，捣衣砧上拂还来。</strong></p><p><strong>此时相望不相闻，愿逐月华流照君。</strong></p><hr><p>《锦瑟》</p><hr><p><strong>锦瑟无端五十弦，一弦一柱思华年。</strong></p><p><strong>庄生晓梦迷蝴蝶，望帝春心托杜鹃。</strong></p><p><strong>沧海月明珠有泪，蓝田日暖玉生烟。</strong></p><p><strong>此情可待成追忆，只是当时已惘然。</strong></p><hr><p>《水调歌头》</p><hr><p><strong>明月几时有？把酒问青天。</strong></p><p><strong>不知天上宫阙，今夕是何年？</strong></p><p><strong>我欲乘风归去，又恐琼楼玉宇，高处不胜寒。起舞弄清影，何似在人间？</strong></p><p><strong>转朱阁，低绮户，照无眠。</strong></p><p><strong>不应有恨，何事长向别时圆？</strong></p><p><strong>人有悲欢离合，月有阴晴圆缺，此事古难全。但愿人长久，千里共婵娟。</strong></p><hr><p>《莲坡诗话》</p><hr><p><strong>琴棋书画诗酒花，当年件件不离它。</strong></p><p><strong>而今七字都变更，柴米油盐酱醋茶。</strong></p><hr><p>未完待续。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>所谓软件工程</title>
    <link href="undefined2020/01/13/%E6%89%80%E8%B0%93%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    <url>2020/01/13/%E6%89%80%E8%B0%93%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="所谓软件工程"><a href="#所谓软件工程" class="headerlink" title="所谓软件工程"></a>所谓软件工程</h2><p>有人把软件工程领域的本质总结为：“How to program if you cannot？”（如果你不会编程，那么你如何编程？）我觉得这句话说得很好，因为我发现软件工程这整个领域，基本就是吹牛扯淡卖“减肥药”的。软件行业的大部分莫名其妙的愚昧行为，很多是由所谓“软件工程专家”发明的。总有人提出一套套的所谓“方法论”或者“原则”，比如 Extreme Programming，Design Patterns，Agile，Pair Programming，Test Driven Development（TDD），DRY principle，…… 他们把这些所谓方法论兜售给各个软件公司，鼓吹它们的各种好处，说使用这些方法，就可以用一些平庸的“软件工程师”，制造出高质量低成本的软件。这就跟减肥药的广告一样：不用运动，不用节食，一个星期瘦 20 斤。你开头还不以为然，觉得这些肤浅的说法能造成什么影响。结果久而久之，这些所谓“方法论”和“原则”成为了整个行业的教条，造成了文化大革命一样的风气。违反这些教条的人，必然被当成菜鸟一样的鄙视，当成小学生一样的教育，当成“反革命”一样的批斗。就算你技术比这些教条的提出者还高明不知道多少倍也一样。</p><p>打破这些软件工程专家们制造的幻觉的一个办法，就是实地去看看这些所谓专家们自己用这些方法论做出了什么好东西。你会惊奇的发现，这些提出各种玄乎其玄的新名词的所谓“专家”，几乎都是从不知道什么旮旯里冒出来的民科，没有一个做出过什么有技术含量的东西，他们根本没有资格对别人编程的方式做出指导。这些人做出来少数有点用的东西（比如 JUnit），其实非常容易，以至于每个初学编程的人都应该做得出来。可世界上就是有这样划算的职业，你虽然写不出好的代码，你对计算原理的理解非常肤浅，却可以通过一些手段，得到评价别人的“代码质量”的权力，占据软件公司的管理层位置。久而久之，别人还以为你是什么泰斗。你仔细看过提出 Java Design Pattern 的四个人（GoF），到底做出过什么厉害的东西吗？没有。提出“DRY Principle”的作者，做出过什么好东西吗？没有。再看看Agile，Pair Programming，TDD……的提出者？全都是一群饭桶。他们其实根本就不懂很多编程的东西，写出文章和书来也是极其肤浅，一知半解。</p><p>所谓“软件工程”，并不像土木工程，机械工程，电机工程，是建立在实际的，科学的基础上的。跟这些“硬工程”不一样，软件弄得不好不会出人命，也不会跟做芯片的公司那样，出一个bug立即导致上亿的损失，身败名裂。所以研究软件工程，似乎特别容易钻空子，失败了之后容易找借口和替罪羊。如果你说我的方法不好，你有什么证据吗？口说无凭，我浪费了你多少时间呢？你的具体执行是不是完全照我说的来的呢？你肯定有什么细节没按我说的做，所以才会失败。总之，如果你用了我的办法不管用，那是你自己的问题！</p><p>想起这些借口我就想起一个笑话：两夫妻睡觉发现床上有跳蚤，身上被咬了好多大包。去买了号称“杀伤率100%”的跳蚤药，撒了好多在床上。第二天早上起来，发现又被咬了好多新的大包。妻子责怪丈夫，说他没看说明书就乱撒。结果丈夫打开说明书一看，内容如下：</p><blockquote><p>本跳蚤药使用方法：</p></blockquote><blockquote><ol><li>抓住跳蚤</li><li>掰开跳蚤的嘴</li><li>把药塞进跳蚤嘴里</li><li>合上跳蚤的嘴</li></ol></blockquote><p>我发现很多软件工程的所谓方法论失败之后的借口，跟这跳蚤药的说明书很像 :)</p><p>人都想省钱，雇用高质量的程序员不容易呀，所以很多公司还是上钩了。他们请这些“软件工程专家”来到公司，推行各种各样的软件方法论，可是发现最后都失败了。这是为什么呢？因为再高明的方法论，也无法代替真正的，精华的计算机科学教育。直到今天还有很多公司推行所谓的Agile，煞有介事的搞一些 stand-up meeting, scrum 之类的形式主义东西，以为这些过家家似的做法就能提高开发质量和效率。很多开发人员也很把一些软件工程的工具当回事，喜欢折腾 Git，Maven 等工具一些偏僻的“新功能”。他们很在乎所谓的版本控制，测试等东西，以为熟练的掌握这些就能开发出高质量，可靠的代码。可是你最后发现，无论你如何高效的使用这些工具，它们都只能起到辅助的，次要的作用。编程工具永远不是程序本身，对编程工具的熟练掌握，永远也无法代替真正的对程序和计算的理解。过分强调这些工具的使用，是本末倒置的，让工程走上失败道路的作法。</p><p>编程真的是一门艺术，它完全符合艺术的各种特征，编程界也充满了艺术界的独有特征。有些初学艺术的人（比如10年前的我），总是挑剔手上的工具，非要用最新最炫的工具，用它们最偏僻最难用的“特性”，才觉得自己能够做出优秀的作品。很多人照不出好的照片，就怪相机不好。买了几万块钱的笨重高档相机，照出来的照片还不如别人用手机照的。这些人不明白，好的摄影师和不好的摄影师，区别在于眼睛，而不是相机。一个真正的艺术家，可以用任何在手上的工具创造出色的作品。有些甚至可以用一些废品垃圾，拙劣的工具，做出杰出的，别具风味的艺术品。因为艺术存在于人的心里，而不在他们使用的工具里面。</p><p>转载来自：<a href="http://www.yinwang.org/blog-cn/2015/06/07/software-engineering" target="_blank" rel="noopener">http://www.yinwang.org/blog-cn/2015/06/07/software-engineering</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>iphone为什么不加大内存</title>
    <link href="undefined2019/12/08/iphone%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E5%8A%A0%E5%A4%A7%E5%86%85%E5%AD%98/"/>
    <url>2019/12/08/iphone%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E5%8A%A0%E5%A4%A7%E5%86%85%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<p>iphone为什么不加大内存</p><hr><p>这实际上是一个技术问题，涉及到iOS与安卓两个操作系统的设计原理。</p><p>首先，安卓机上大内存，这是个中国特色，也就是说只有中国国内销售的安卓机才会上这么大的内存，海外版的安卓机主流内存基本和苹果差不了太多。图我就不贴了，大家可以自己去查一下，华为的P30，海外版的128G硬盘的型号只配4G或6G内存，而中国版的P30，64G硬盘的型号却配上了8G内存；海外版的安卓机，128G硬盘配4G内存比比皆是，简直不要太多，但在国内，你几乎找不到一款128G硬盘配4G内存的安卓机。这样乍一看好像我们得了便宜，可其实，这是国产安卓生态的无奈之举。</p><p>先说国内安卓机为什么上大内存吧。举一个例子，比如我们常用的微信这个APP，首先你打开微信登录账号后，你手机上的微信APP就会和腾讯的服务器保持一个长久的连接，你发一条消息给你朋友，这条消息不是直接从你的手机上发到他的手机上的，而是你的手机将消息发给了腾讯的服务器，然后腾讯的服务器再发给你朋友。这个时候就有一个问题，如果你朋友手机上的微信APP处在关闭状态下，那么即使腾讯服务器把消息发过去了，他也收不到，因为他的手机上微信APP已经完全关闭了，已经和腾讯服务器断开连接了，只有当他再次打开微信的时候，连接恢复，他才能收到那条信息。也就是说，想要及时收到消息，那么微信这个APP就不能完全关闭，需要留下一些线程在后台一直保持运行，一直和腾讯的服务器保持接连，这样一旦收到消息，系统才能及时启动消息机制提醒你。</p><p>所以，国内安卓系统下，每一个APP，都需要在后台(也就是内存里)留下一些线程随时准备接收外来信息，也就是说你刚打开手机还啥都没干，你手机上所有APP的一部分线程已经悄悄启动，进驻内存，而这些后台启动的线程是无法关闭的，因为是合法的，关闭的话用户就无法及时收到消息。另外，不要小看这些后台线程的数量，一个APP在后台里留十几二十MB确实不多，但100个APP(64G硬盘的手机就能装100个APP)加起来就要吃掉将近2G的内存！</p><p>因此，国内安卓机的内存容量必须跟着硬盘容量递增，硬盘容量越大，能下的APP就越多，就越需要更大的内存来保证这些APP留在后台的线程正常运行。</p><p>再说iOS，它为啥就不需要大内存呢？因为苹果有自己的服务器(谷歌实际上也有自己的服务器，但国内不能用，下面会说)。iOS的这个系统，必须搭配苹果公司的服务器才能正常运行。每一台iOS设备在联网的时候，iOS系统首先会和苹果的服务器建立一个长连接。</p><p>还是微信那个例子，在iOS上，如果微信处在打开状态下，那么逻辑还是和上述安卓的一样，差距是体现在关闭微信后。如果你iPhone上的微信APP关闭了，会和腾讯的服务器断开，而这个时候，你朋友发了一条消息给你，这条消息先发给了腾讯的服务器，这时腾讯服务器发现你手机上的微信APP没有和服务器建立连接，那么它会将这条消息转头发给苹果的服务器，然后苹果的服务器收到后会发送给你的iOS系统，系统收到就能及时做出提醒。这样实际上是多了一个步骤，但带来的好处是你手机上的微信APP可以完全关闭，不需要留下多余的线程来接收消息，因为苹果的服务器会一直保持接收消息，然后将消息发给手机系统，系统再做出提醒。</p><p>这样一来，苹果手机的内存就不需要跟着硬盘容量一起递增，因为即使APP完全关闭，也不影响及时接收消息。再加上iOS系统实际上不支持真正意义上的后台运行(仅支持后台听歌、下载、导航等有限几个操作，如果一个APP进入后台，10分钟内没被换到前台来，那么系统就会将它关闭，只留下临死前的一个截图，所谓的墓碑机制)，所以苹果手机的这些内存绝大部分时间内其实只为一个APP(当前这个)服务，一个APP使用4G内存，真的是绰绰有余，有余到多的不能再多了。</p><p>插个题外话，都说苹果手机安全，注重隐私，也有这个原因，苹果手机上的APP，如果关闭了，那就是真的全部线程都关闭了；而安卓，由于每一个APP都可以在后台留一些线程一直运行，有的无良APP甚至手机厂商，就不仅仅会留下接收消息的线程，还会留下偷偷开启摄像头或者麦克风的线程，去收集用户数据，而这些后台的的线程，由于是系统代码层面的东西，用户根本没可能去关闭。</p><p>最后，说一下海外版安卓机为什么也不上这么大的内存，因为海外版安卓机可以使用谷歌的服务器（前段时间闹的沸沸扬扬的安卓停止对华为授权事件，实际上就是谷歌不让海外版华为连接谷歌的服务器了），而使用了谷歌的服务器，推送机制就变得和iOS一样了，就不需要有APP自己的线程留在后台了，谷歌的服务器会帮APP们接收信息。</p><p>而由于众所周知的原因，国内安卓用户是无法连接谷歌的服务器的，那么，APP要想及时接收消息，开发者也只能使用常驻后台这个方法，而让APP线程常驻在后台，需要大量的内存支持，那国内的安卓机就只好加大内存。那么，谁来为这些多出来的内存买单呢？羊毛都出在羊身上，当然还是用户，还是消费者。这就是我们国内安卓用户的悲催之处，我们不仅要忍受隐私的泄露，还要为这样的行为买单。</p><p>目前，国内的APP驻留后台已经把国内的整个安卓生态搞的乌烟瘴气、乱七八糟。其实好多大厂想过解决方案，比如小米推出自己的推送服务，华为也有自己的推送服务，但全都收效甚微。因为没什么开发者去配合他们，一来因为开发者适配的话需要一个厂一个厂去适配，提升了开发成本和维护成本，二来APP开发商也不愿放弃常驻后台带来的利益。</p><p>目前比较值得期待的，是安卓推送联盟，这个联盟是由工信部牵头的，运行机制和iOS的推送原理差不多，如果能全面铺开，可以解决上述问题，但这一套现在还在测试阶段，还是个美好的愿望，日后能不能全面铺开还是前途未卜。</p><p>所以，苹果不上大内存，真不是厨子抠门，因为没必要了，国内安卓机12G内存都打不过苹果4G内存，为什么？因为12G内存里，很大一部分是留给国产APP常驻后台用的。</p><p>就是这样。</p><p>链接：<a href="https://www.zhihu.com/question/276578129/answer/829637068" target="_blank" rel="noopener">https://www.zhihu.com/question/276578129/answer/829637068</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>香港</title>
    <link href="undefined2019/11/22/%E9%A6%99%E6%B8%AF/"/>
    <url>2019/11/22/%E9%A6%99%E6%B8%AF/</url>
    
    <content type="html"><![CDATA[<p>香港</p><hr><p>我很早就想談談香港。自六月份反送中至今已過數月，但是街頭上的運動似乎還在越演越烈。如今上街頭的人們已經不再是不滿送中條例而抗爭，而是為了五項訴求。送中條例，起因是一對香港情侶在台灣旅遊，旅遊過程中男方把女方殺害並丟包台灣，而自己獨自一人坐飛機回到香港。當台灣警察發現遺體並立案調查發現嫌疑人是其香港男友的時候棘手的事情來了，台灣在香港沒有司法管轄權，也就是說只要在香港，台灣警察沒有辦法逮捕嫌疑人。這難道不是法律的漏洞嗎？拋開部分人的利益不說，一個殺人犯生活在你所處的社會你會安心嗎？殺人償命天經地義，所以送中條例的草案就生成了。但是送中條例又有什麼問題呢？它觸及了中港之間的核心，一國兩制。只要送中條例送至立法院並正式立法，從某種程度上確實動搖了一國兩制的核心。這也是為什麼香港突破自829以來的最大遊行數量。只要送中條例一立法，香港的司法自治受到衝擊，突破了基本法，動搖了一國兩制，這是中共不願看到的也是香港人民不願看到的，所以反送中條例的呼聲越來越高。最終，送中條例也壽終正寢。</p><p>然而，事態並沒有像想象中的那樣冷卻，反而升溫。當我們看到暴徒破壞基礎設施的時候，當我們看到暴徒在街上與警察對峙的時候，當我們看到暴徒對平民出手的時候，種種的種種，都是在透支著自己的未來，傷害著香港這座城市。暴徒用來形容這些人們一點都不過份，他們打著保護香港的旗號卻同時做著傷害香港的事，僅僅是為了他們所謂的“民主”。如果這些暴徒像當初承諾的那樣用和理非的方式來進行民主訴求，香港也不會落到現在這種不可逆的境地。如果他們真正的愛香港，他們也不會這樣傷害著香港。</p><p>網絡上面暴徒與警察對峙的畫面令人印象深刻，國外媒體也不斷放大警察過度使用暴力此事，彷彿就是要彰顯出香港政府濫用權力，欺負傷害民主訴求的人士，但是事實真是這樣嗎？我沒有在這段時間去過香港，我的香港朋友也都不是類似的香港廢青，事情的真相如何我目前不得而知，香港政府本應該把真相告訴全世界的人們但是沒有做這也是讓我覺得不解且惋惜的。在我們了解事實真相之前，本不應該妄自推測以及傳播，但是很多大大小小的媒體卻是這樣。大家都說港警過度暴力，那是因為媒體過分放大解讀，難道在街上與警察對峙的人不暴力嗎？那些傷害警察的視頻呢？大家在網絡看的視頻都太片面化，只要媒體控制輿論，真相永遠難于浮出水面。去看看BBC，去看看VOA，去看看CNN，看看Washton Post等的視頻輸出，彷彿他們輸出的都是真相，大家都喜歡眼見為實，看到警察暴力的視頻就信以為真，默認香港警察就是媒體報導的那樣，真是悲哀。前段時間出現了港警開槍擊中了試圖攻擊警察的示威者，如果你看過這段影片，細想，哪一個國家的人敢對攜帶槍枝的警察進行攻擊？如果槍被示威者奪走怎麼辦？就這樣，網絡上瘋傳警察亂開槍，這槍，開的剛剛好而已。</p><p>看看街頭上的暴動，現在已經輻射到了校園。街頭上基礎設施的破壞，店家商鋪的砸毀，校園內基礎設施的毀壞，還有那些只要被貼上中國標籤的，這些你看得到和看不到的損失誰來承受？這些暴徒難道不該抓起來嗎？你還覺得他們和理非嗎？那些在這些事件中無辜受傷的人民都是活該報應嗎？那些堅持要為“眼球革命”討回公道的人去哪了？那些堅持要伸張正義為“15歲女孩被港警姦殺”的人去哪了？那些堅持一口咬定周梓樂被港警推下樓不治身亡的人去哪了？</p><p>不同的立場如果不能回到事實講話就永遠不能決解問題。我也只能祝福香港了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Fly,FPX fly</title>
    <link href="undefined2019/11/16/Fly,FPX%20fly/"/>
    <url>2019/11/16/Fly,FPX%20fly/</url>
    
    <content type="html"><![CDATA[<p>Fly,FPX fly</p><hr><p>在巴黎，FPX以大比分3:0輕鬆戰勝G2奪下2019年LOLS賽冠軍。這是LPL連續兩年獲得S賽冠軍，意義不言而喻，這象徵著LPL是目前第一賽區。FPX，一隻名不經傳的戰隊，在2019年LPL春季賽中拿下季軍，夏季賽拿下冠軍，更重要的是在群星璀璨的S賽拿下冠軍。電子競技的魅力是你永遠不知道下一刻會發生什麼。我從來沒想過花重金重建強勢歸來的SKT會倒在半決賽，我從沒想過在S賽幾近找回去年冠軍風範的IG會倒在半決賽，更沒想到一群可能你都叫不上名字的人會在決賽乾淨俐落的戰勝EU銀河戰艦G2。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>淺談人工智能</title>
    <link href="undefined2019/11/10/%E6%B7%BA%E8%AB%87%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    <url>2019/11/10/%E6%B7%BA%E8%AB%87%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<p>淺談人工智能</p><hr><p>如今很多人都喜歡鼓吹人工智能，殊不知他們不但不了解人工智能是什麼，往往還嚴重“機械化”他們的內心。他們或多或少的失去了一些人性，成天朗朗上口的人工智能術語，忘記了人最需要的是什麼，忘記了人的價值。就像卓別林在「大獨裁者」中說的一樣:“機器一樣的人，機器一樣的心。”</p><p>提到人工智能，這些人野心勃勃的號稱要“取代人類的工作”，但是仔細想想有可能嗎？人工智能真的能夠代替我們人類工作甚至最的更好嗎？答案肯定是否定的。舉個例子，由于有了“個人助手”（後面會簡單聊聊），有人就號稱類似的技術可以用來製造機器客服，使用機器代替人類作為客服。他們沒想清楚的是，像客服如此簡單的工作，跟這些語音控制的玩意比起來，難度確是天囊之別。客服必須理解公司業務，必須能夠準確理解客戶在說什麼，必須有效的反饋給客戶，行程有效的對話，真正的為客戶解決問題，而不是像如今的”個人助手“一樣只抓取關鍵詞。另外，客服必須能夠從對話中提取有用能夠引發現實世界的改變，比如呼叫某某中心停止某某動作，向上級請求某某動作，抓住客戶心裡，向他們推薦公司業務等等，這種需要人類經驗才能處理的事情你確定以上的這種所謂個人助手可以做得來？所以要代替人類進行客服這項工作，首先機器要先能夠跟客戶行程有用的對話，理解客戶的話，他們還必須擁有以上所說的現實世界的大量經驗，需要改變世界的能力。綜上所述，我看不到任何希望機器可以利用現有的技術實現機器客服。連客服這麼按步就幫的工作，機器都無法取代，更不用說複雜的工作了。再舉一個複雜工作的例子，很多看到了AlphaGo的勝利，就妄下言論說Deep Learning終究有一天可以實現人類級別的智能。很多人認為在做困難的事情（比如圍棋），就是體現真正的人工智能，其實並不是這樣的。你用心算除法（131232181287 / 12312）難不難？這對於常人來講肯定是很難的，但是對任何一台傻電腦都可以在0.1s內算出來。圍棋，等等棋類也是一樣的原理。歸根結底就是暴力迭代，並不能體現真正的人工智能。</p><p>這邊簡單聊聊上述所說的“個人助手。”說“個人助手之前”我們還要聊聊一個概念就是識別。縱觀歷史上機器學習能夠做到的事情，都是一些字符識別、語音識別、人臉識別一類的。但是這些識別系統可跟人工智能相處甚遠。說白了，識別系統也就是統計學裡的拟合函数能做的事情。比如字符識別和語音識別，就是輸入像素或者音頻，輸出單詞文本。雖然這些識別系統能夠“識別”出你說的哪些字，但它卻不“理解”你在說什麼。</p><p>聊一點深入的話題，看不懂的人可以略過。“識別”和“理解”的差別，就像程序語言裡面“語法”和“語義”的差別。程序語言的文本，首先經過詞法分析器，語法分析器，才能送進解釋器，只有解釋器才能實現程序的語義。大部分的人工智能裡面連語法分析器都沒有，所以主謂賓，句子結構的分析不清楚，更別說理解其中個的含義了。舉一個很簡單的例子。如果我對Siri說：“我想看一些貓的照片。”他會給我下圖回答：“我在網絡上沒有找到與“一些貓”有關的資料。</p><p><img src="/imgs/siri-cat.jpg" srcset="/img/loading.gif" alt=""></p><p>這說明了什麼？很多人發現了，這說明了Siri無法理解這個句子，也就是Siri裡面並沒有解釋器，連一個好的分詞系統的沒有，所以它連該搜索什麼關鍵字都不知道。為什麼Siri要去網絡上找關於“一些貓”的信息，而不是“貓”的信息呢。因為Siri裡面沒有解釋器，沒有語法樹。他只是利用一些NLP方法，把句子拆解成了“我….想….看….一些貓….的….照片”，而不是像語法樹對應的“我….想….看….一些….貓….的….照片”。這個句子的語法樹解析出來就是如下圖樣子。</p><p><img src="/imgs/cat-parse-tree.jpg" srcset="/img/loading.gif" alt=""></p><p>根據語法樹，這句話可以簡化成：“我想看照片。”其中“看照片”是一個從舉，它是“我想….“的賓語，也就是所謂的賓語從舉。多少照片呢？一些。看什麼照片呢？貓的照片。</p><ul><li>我想看照片</li><li>我想看一些照片</li><li>我想看貓的照片</li><li>我想看一些貓的照片</li></ul><p>挺有趣的是嗎？</p><p>Siri裡面有沒有這種語法樹，甚至根據NLP連“一些”和“貓”都沒分開，這就是為什麼他去找“一些貓”而不是“貓”。雖然Siri正確的進行的“語音識別”，知道了我說的哪些字，但是由於沒有解釋器，沒有語法樹，不可能正確的理解我到底在說什麼，它甚至不知道我在說“關於什麼”。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>